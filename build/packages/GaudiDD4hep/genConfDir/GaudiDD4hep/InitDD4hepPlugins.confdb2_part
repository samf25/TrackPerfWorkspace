{
    'InitializeDD4hep': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'InitializeDD4hep.cxx:6',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'DD4hepXMLFile': ('std::string', 'dd4hep_compact.xml', '''Name of the DD4hep compact xml file to load [InitializeDD4hep]'''),
            'EncodingString': ('std::string', '', '''Compact File parameter of encoding string for LCTrackerCellID. While this will not be used later, make sure this is the encoding string passed into reconstruction. [InitializeDD4hep]'''),
        },
    },
}
