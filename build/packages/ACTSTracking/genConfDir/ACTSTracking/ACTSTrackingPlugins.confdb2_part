{
    'ACTSDuplicateRemoval': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'ACTSDuplicateRemoval.cxx:52',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'InputTrackCollectionName': ('DataObjectHandleBase', DataHandle('TruthTracks', 'R', 'edm4hep::TrackCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackCollection>,std::tuple<edm4hep::TrackCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'OutputTrackCollectionName': ('DataObjectHandleBase', DataHandle('DedupedTruthTracks', 'W', 'edm4hep::TrackCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackCollection>,std::tuple<edm4hep::TrackCollection>,Gaudi::Functional::Traits::use_<> >]'''),
        },
    },
    'ACTSMergeHitCollections': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'ACTSMergeHitCollections.cxx:6',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'InputCollection6': ('DataObjectHandleBase', DataHandle('Collection6', 'R', 'DataWrapper<edm4hep::TrackerHitPlaneCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackerHitPlaneCollection>,std::tuple<DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection5': ('DataObjectHandleBase', DataHandle('Collection5', 'R', 'DataWrapper<edm4hep::TrackerHitPlaneCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackerHitPlaneCollection>,std::tuple<DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection4': ('DataObjectHandleBase', DataHandle('Collection4', 'R', 'DataWrapper<edm4hep::TrackerHitPlaneCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackerHitPlaneCollection>,std::tuple<DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection3': ('DataObjectHandleBase', DataHandle('Collection3', 'R', 'DataWrapper<edm4hep::TrackerHitPlaneCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackerHitPlaneCollection>,std::tuple<DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection2': ('DataObjectHandleBase', DataHandle('Collection2', 'R', 'DataWrapper<edm4hep::TrackerHitPlaneCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackerHitPlaneCollection>,std::tuple<DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection1': ('DataObjectHandleBase', DataHandle('Collection1', 'R', 'DataWrapper<edm4hep::TrackerHitPlaneCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackerHitPlaneCollection>,std::tuple<DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'OutputCollection': ('DataObjectHandleBase', DataHandle('MergedCollection', 'W', 'edm4hep::TrackerHitPlaneCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackerHitPlaneCollection>,std::tuple<DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection>,DataWrapper<edm4hep::TrackerHitPlaneCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
        },
    },
    'ACTSMergeRelationCollections': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'ACTSMergeRelationCollections.cxx:6',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'InputCollection6': ('DataObjectHandleBase', DataHandle('Collection6', 'R', 'DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,std::tuple<DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection5': ('DataObjectHandleBase', DataHandle('Collection5', 'R', 'DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,std::tuple<DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection4': ('DataObjectHandleBase', DataHandle('Collection4', 'R', 'DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,std::tuple<DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection3': ('DataObjectHandleBase', DataHandle('Collection3', 'R', 'DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,std::tuple<DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection2': ('DataObjectHandleBase', DataHandle('Collection2', 'R', 'DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,std::tuple<DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'InputCollection1': ('DataObjectHandleBase', DataHandle('Collection1', 'R', 'DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,std::tuple<DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
            'OutputCollection': ('DataObjectHandleBase', DataHandle('MergedCollection', 'W', 'edm4hep::MCRecoTrackerHitPlaneAssociationCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,std::tuple<DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,DataWrapper<edm4hep::MCRecoTrackerHitPlaneAssociationCollection> >,Gaudi::Functional::Traits::use_<> >]'''),
        },
    },
    'ACTSSeededCKFTrackingAlg': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'ACTSSeededCKFTrackingAlg.cxx:37',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'InputTrackerHitCollectionName': ('DataObjectHandleBase', DataHandle('TrackerHits', 'R', 'edm4hep::TrackerHitPlaneCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackCollection,edm4hep::TrackCollection>,std::tuple<edm4hep::TrackerHitPlaneCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'OutputTrackCollectionName': ('DataObjectHandleBase', DataHandle('Tracks', 'W', 'edm4hep::TrackCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackCollection,edm4hep::TrackCollection>,std::tuple<edm4hep::TrackerHitPlaneCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'OutputSeedCollectionName': ('DataObjectHandleBase', DataHandle('SeedTracks', 'W', 'edm4hep::TrackCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackCollection,edm4hep::TrackCollection>,std::tuple<edm4hep::TrackerHitPlaneCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'MatFile': ('std::string', '', '''Path to the material description JSON file. Can be empty. [ACTSAlgBase]'''),
            'TGeoFile': ('std::string', '', '''Path to the tracker geometry file. [ACTSAlgBase]'''),
            'RunCKF': ('bool', True, '''Run tracking using CKF. False means stop at the seeding stage. [ACTSSeededCKFTrackingAlg]'''),
            'PropagateBackward': ('bool', False, '''Extrapolates tracks towards beamline. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_RMax': ('float', 150.000, '''Maximum radius of hits to consider. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_DeltaRMin': ('float', 5.00000, '''Minimum dR between hits in a seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_DeltaRMax': ('float', 80.0000, '''Maximum dR between hits in a seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_DeltaRMinTop': ('float', 0.00000, '''Minimum dR between the reference hit and outer ones in a seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_DeltaRMaxTop': ('float', 0.00000, '''Maximum dR between the reference hit and outer ones in a seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_DeltaRMinBottom': ('float', 0.00000, '''Minimum dR between the reference hit and inner ones in a seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_DeltaRMaxBottom': ('float', 0.00000, '''Maximum dR between the reference hit and inner ones in a seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_CollisionRegion': ('float', 75.0000, '''Size of the collision region in one direction (assumed symmetric). [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_ZMax': ('float', 600.000, '''Maximum z of hits to consider. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_SigmaScattering': ('float', 50.0000, '''Number of sigmas to allow in scattering angle. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_RadLengthPerSeed': ('float', 0.100000, '''Average radiation length per seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_MinPt': ('float', 500.000, '''Minimum pT of tracks to seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_ImpactMax': ('float', 3.00000, '''Maximum d0 of tracks to seed. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_zBinEdges': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''Bins placement along Z for seeding. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_zTopBinLen': ('int', 1, '''Number of top bins along Z for seeding. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_zBottomBinLen': ('int', 1, '''Number of bottom bins along Z for seeding. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_phiTopBinLen': ('int', 1, '''Number of top bins along phi for seeding. [ACTSSeededCKFTrackingAlg]'''),
            'SeedFinding_phiBottomBinLen': ('int', 1, '''Number of bottom bins along phi for seeding. [ACTSSeededCKFTrackingAlg]'''),
            'InitialTrackError_Pos': ('double', 0.010000000, '''Track error estimate, local position (mm). [ACTSSeededCKFTrackingAlg]'''),
            'InitialTrackError_Phi': ('double', 0.017453293, '''Track error estimate, phi (radians). [ACTSSeededCKFTrackingAlg]'''),
            'InitialTrackError_RelP': ('double', 0.25000000, '''Track error estimate, momentum component (relative). [ACTSSeededCKFTrackingAlg]'''),
            'InitialTrackError_Lambda': ('double', 0.017453293, '''Track error estimate, lambda (radians). [ACTSSeededCKFTrackingAlg]'''),
            'InitialTrackError_Time': ('double', 29979.246, '''Track error estimate, time (sec). [ACTSSeededCKFTrackingAlg]'''),
            'CKF_Chi2CutOff': ('double', 15.000000, '''Maximum local chi2 contribution. [ACTSSeededCKFTrackingAlg]'''),
            'CKF_NumMeasurementsCutOff': ('int', 10, '''Maximum number of associated measurements on a single surface. [ACTSSeededCKFTrackingAlg]'''),
            'SeedingLayers': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''Layers to use for seeding in vector. [ACTSSeededCKFTrackingAlg]'''),
        },
    },
    'FilterTracksAlg': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'FilterTracksAlg.cxx:12',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'InputTrackCollectionName': ('DataObjectHandleBase', DataHandle('Tracks', 'R', 'edm4hep::TrackCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackCollection>,std::tuple<edm4hep::TrackCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'OutputTrackCollectionName': ('DataObjectHandleBase', DataHandle('FilteredTracks', 'W', 'edm4hep::TrackCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::TrackCollection>,std::tuple<edm4hep::TrackCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'NHitsTotal': ('int', 7, '''Minimum number of hits on track [FilterTracksAlg]'''),
            'NHitsVertex': ('int', 3, '''Minimum number of hits on vertex detector [FilterTracksAlg]'''),
            'NHitsInner': ('int', 2, '''Minimum number of hits on inner tracker [FilterTracksAlg]'''),
            'NHitsOuter': ('int', 1, '''Minimum number of hits on outer tracker [FilterTracksAlg]'''),
            'MinPt': ('float', 1.00000, '''Minimum transverse momentum [FilterTracksAlg]'''),
        },
    },
    'TrackTruthAlg': {
        '__component_type__': 'Algorithm',
        '__declaration_location__': 'TrackTruthAlg.cxx:14',
        '__interfaces__': ('IDataHandleHolder', 'IStateful', ),
        'properties': {
            'ExtraInputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'ExtraOutputs': ('std::unordered_set<DataObjID,DataObjID_Hasher,std::equal_to<DataObjID>,std::allocator<DataObjID> >', set(), ''' [DataHandleHolderBase<PropertyHolder<CommonMessaging<implements<IAlgorithm,IDataHandleHolder,IProperty,IStateful> > > >]'''),
            'OutputLevel': ('int', 0, '''output level [Gaudi::Algorithm]'''),
            'Enable': ('bool', True, '''should the algorithm be executed or not [Gaudi::Algorithm]'''),
            'ErrorMax': ('unsigned int', 1, '''[[deprecated]] max number of errors [Gaudi::Algorithm]'''),
            'AuditAlgorithms': ('bool', False, '''[[deprecated]] unused [Gaudi::Algorithm]'''),
            'AuditInitialize': ('bool', False, '''trigger auditor on initialize() [Gaudi::Algorithm]'''),
            'AuditReinitialize': ('bool', False, '''trigger auditor on reinitialize() [Gaudi::Algorithm]'''),
            'AuditRestart': ('bool', False, '''trigger auditor on restart() [Gaudi::Algorithm]'''),
            'AuditExecute': ('bool', False, '''trigger auditor on execute() [Gaudi::Algorithm]'''),
            'AuditFinalize': ('bool', False, '''trigger auditor on finalize() [Gaudi::Algorithm]'''),
            'AuditStart': ('bool', False, '''trigger auditor on start() [Gaudi::Algorithm]'''),
            'AuditStop': ('bool', False, '''trigger auditor on stop() [Gaudi::Algorithm]'''),
            'Timeline': ('bool', True, '''send events to TimelineSvc [Gaudi::Algorithm]'''),
            'MonitorService': ('std::string', 'MonitorSvc', '''name to use for Monitor Service [Gaudi::Algorithm]'''),
            'RegisterForContextService': ('bool', False, '''flag to enforce the registration for Algorithm Context Service [Gaudi::Algorithm]'''),
            'Cardinality': ('int', 0, '''how many clones to create - 0 means algo is reentrant [Gaudi::Algorithm]'''),
            'NeededResources': ('std::vector<std::string,std::allocator<std::string> >', [  ], '''named resources needed during event looping [Gaudi::Algorithm]'''),
            'Blocking': ('bool', False, '''if algorithm invokes CPU-blocking system calls (offloads computations to accelerators or quantum processors, performs disk or network I/O, is bound by resource synchronization, etc) [Gaudi::Algorithm]'''),
            'FilterCircularDependencies': ('bool', True, '''filter out circular data dependencies [Gaudi::Algorithm]'''),
            'InputTrackerHit2SimTrackerHitRelationName': ('DataObjectHandleBase', DataHandle('TrackMCRelation', 'R', 'edm4hep::MCRecoTrackerHitPlaneAssociationCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackParticleAssociationCollection>,std::tuple<edm4hep::TrackCollection,edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'InputTrackCollectionName': ('DataObjectHandleBase', DataHandle('Tracks', 'R', 'edm4hep::TrackCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackParticleAssociationCollection>,std::tuple<edm4hep::TrackCollection,edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,Gaudi::Functional::Traits::use_<> >]'''),
            'OutputParticle2TrackRelationName': ('DataObjectHandleBase', DataHandle('Particle2TrackRelationName', 'W', 'edm4hep::MCRecoTrackParticleAssociationCollection'), ''' [Gaudi::Functional::details::DataHandleMixin<std::tuple<edm4hep::MCRecoTrackParticleAssociationCollection>,std::tuple<edm4hep::TrackCollection,edm4hep::MCRecoTrackerHitPlaneAssociationCollection>,Gaudi::Functional::Traits::use_<> >]'''),
        },
    },
}
